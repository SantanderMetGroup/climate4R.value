biasCorrection(y = obs.data[[x]], x = data.raw[[x]],
newdata = data.raw.fut,
method = "eqm", cross.val = "loo",
precipitation = precip,
wet.threshold = 1,
window = c(90, 31),
join.members = TRUE)
})
data.bc.fut <- lapply(1:length(data.raw.fut), function(x)  {
precip <- FALSE
if (names(data.raw.fut)[x] == "pr") precip <- TRUE
biasCorrection(y = obs.data[[x]], x = data.raw[[x]],
newdata = data.raw.fut,
method = "eqm",
precipitation = precip,
wet.threshold = 1,
window = c(90, 31),
join.members = TRUE)
})
names(data.raw.fut)
str(data.raw.fut)
data.bc.fut <- lapply(1:length(data.raw.fut), function(x)  {
precip <- FALSE
if (names(data.raw.fut)[x] == "pr") precip <- TRUE
biasCorrection(y = obs.data[[x]], x = data.raw[[x]],
newdata = redim(data.raw.fut, member = FALSE),
method = "eqm",
precipitation = precip,
wet.threshold = 1,
window = c(90, 31),
join.members = TRUE)
})
redim(data.raw.fut, member = FALSE)
biasCorrection(y = obs.data[[x]], x = data.raw[[x]],
newdata = data.raw.fut[[x]],
method = "eqm",
precipitation = precip,
wet.threshold = 1,
window = c(90, 31),
join.members = TRUE)
data.bc.fut <- lapply(1:length(data.raw.fut), function(x)  {
precip <- FALSE
if (names(data.raw.fut)[x] == "pr") precip <- TRUE
biasCorrection(y = obs.data[[x]], x = data.raw[[x]],
newdata = data.raw.fut[[x]],
method = "eqm",
precipitation = precip,
wet.threshold = 1,
window = c(90, 31),
join.members = TRUE)
})
names(data.bc.fut) <- variables
save(data.raw.fut, file = paste0(dir.Rdata, dataset, "_", paste0(season, collapse = "_"), "_", paste0(names(data), collapse = "_"), "_raw.rda"))
save(data.bc.fut, file = paste0(dir.Rdata, dataset, "_", paste0(season, collapse = "_"), "_", paste0(names(data), collapse = "_"), "_BC.rda"))
temporalPlot(obs.data$uas, data.raw$uas, data.bc$uas, data.raw.fut$uas, data.bc.fut$uas)
institution <- "UC"
lake_id <- lakename
ClimateModelName <- dataset
ExperimentName <- "projection"
member <- "member01"
freq <- "day"
# Create directory and save file
startTime <- format(as.POSIXlt(yymmdd[1]), format = "%Y%m%d")
endTime <- format(tail(as.POSIXlt(yymmdd), n = 1), format = "%Y%m%d")
dirName <- paste0(dir.data, lake_id, "/CLIMATE/", lake_id, "_", institution, "_", ClimateModelName, "_", ExperimentName, "_", member, "_", freq, "_", startTime, "-", endTime, "/", sep = "", collapse = NULL)
dir.create(dirName, showWarnings = TRUE, recursive = TRUE, mode = "0777")
write.table(df, paste0(dirName,"meteo_file.dat", sep = "", collapse = NULL), sep = "\t", row.names = FALSE, col.names = FALSE, quote = FALSE)
library(climate4R.value)
library(loadeR)
loginUDG("miturbide", "lukinvela9&9")
datasets <- UDG.datasets(pattern = "EUR44.*evaluation")$name[c(1, 4, 7, 10, 12)]
UDG.datasets()$url
datasets <- UDG.datasets(pattern = "AFR44.*historical")$name
UDG.datasets(pattern = "EWEMBI")
ewembi <- loadGridData(UDG.datasets(pattern = "EWEMBI")$name, var = "pr", lonLim =  c(-25, 43), latLim = c(-30, 36) , years = 1989:2008)
lon <- c(-10, 20)
lat <- c(-30, 36)
lon <- c(-10, 20)
lat <- c(-10, 36)
period <- 1989:2008
ewembi <- loadGridData(UDG.datasets(pattern = "EWEMBI")$name, var = "pr", lonLim =  lon, latLim = lat, years = period)
rm(list=ls())
datasets <- UDG.datasets(pattern = "AFR44.*historical")$name
lon <- c(-10, 20)
lat <- c(-10, 36)
period <- 1989:2008
ewembi <- loadGridData(UDG.datasets(pattern = "EWEMBI")$name, var = "pr", lonLim =  lon, latLim = lat, years = period)
library(devtools)
build(pkg = "climate4R", path = "/media/maialen/work/WORK/GIT/")
build(pkg = "/media/maialen/work/WORK/GIT/climate4R.value", path = "/media/maialen/work/WORK/GIT/")
library(climate4R.value)
library(climate4R.value)
library(climate4R.value)
?loadGridData
lon <- c(-180, 180)
seq(lon[1], lon[2], 1)
seq(lon[1], lon[2], 1)->z
split(z, f = runif(n = length(z), min = 1, max = 10))
split(z, f = ceiling(runif(n = length(z), min = 1, max = 10)))
split(z, f = sort(ceiling(runif(n = length(z), min = 1, max = 10))))
library(loadeR)
?loadCircularGridData
period <- 2041:2060
split.factor <- sort(ceiling(runif(n = length(period), min = 1, max = 10)))
split.factor
period.blocks <- split(period, f = split.factor)
period.blocks
scenario <- "rcp85" # "rcp45"
period <- switch(scenario,
"historical" = 1986:2005,
"rcp45" = 2041:2060,
"rcp85" = 2041:2060)
datasets <- UDG.datasets(pattern = paste0(domain, ".*", scenario))$name[-4]
datasets
domain <- ANT44
domain <- "ANT44"
datasets <- UDG.datasets(pattern = paste0(domain, ".*", scenario))$name[-4]
datasets
# check the above figure to select the regions, for example:
region <- c("ANT") # Antarctica
domain <- "ANT44"
#season <- "annual" # Options are "DJF", "MAM", "JJA", "SON", "annual" (the last is for the full year)
var <- "tasmax"
indcode <- var
lon <- bbox(AR6regions_land[region])[1,]
lat <- bbox(AR6regions_land[region])[2,]
fig_dir <- "figs/"
data_dir <- "data/"
fig.height <- 8 # height of the output figure (saved in fig_dir)
fig.width <- 8 # width of the output figure (saved in fig_dir)
fig.layout <- c(3, 1) # pannel of the maps in figure (c(columns, rows))
pal.sd <- brewer.pal(n = 9, "Greys")
library(RColorBrewer)
# check the above figure to select the regions, for example:
region <- c("ANT") # Antarctica
domain <- "ANT44"
#season <- "annual" # Options are "DJF", "MAM", "JJA", "SON", "annual" (the last is for the full year)
var <- "tasmax"
indcode <- var
lon <- bbox(AR6regions_land[region])[1,]
lat <- bbox(AR6regions_land[region])[2,]
fig_dir <- "figs/"
data_dir <- "data/"
fig.height <- 8 # height of the output figure (saved in fig_dir)
fig.width <- 8 # width of the output figure (saved in fig_dir)
fig.layout <- c(3, 1) # pannel of the maps in figure (c(columns, rows))
pal.sd <- brewer.pal(n = 9, "Greys")
library(climate4R.climdex)
#season as integers
seas <- switch(season,
"DJF" = c(12, 1, 2),
"MAM" = 3:5,
"JJA" = 6:8,
"SON" = 9:11,
"annual" = 1:12)
#monthly aggregation function for loadGridData
aggrfunload <- switch(var,
"pr" = "sum",
"tasmin" = "min",
"tasmax" = "max",
"tas" = "mean")
#create directories for results
season <- "annual" # Options are "DJF", "MAM", "JJA", "SON", "annual" (the last is for the full year)
#season as integers
seas <- switch(season,
"DJF" = c(12, 1, 2),
"MAM" = 3:5,
"JJA" = 6:8,
"SON" = 9:11,
"annual" = 1:12)
#monthly aggregation function for loadGridData
aggrfunload <- switch(var,
"pr" = "sum",
"tasmin" = "min",
"tasmax" = "max",
"tas" = "mean")
#create directories for results
indcode <- "ID"
x
x <- 1
b <- period.blocks[[1]]
g <- loadCircularGridData(dataset = x,
var = var,
lonLim = lon,
latLim = lat,
season = seas,
years = b)
loginUDG("miturbide", "lukinvela9&9")
g <- loadCircularGridData(dataset = x,
var = var,
lonLim = lon,
latLim = lat,
season = seas,
years = b)
var
lon
lat
lat <- bbox(AR6regions_land[region])[2,]
library(loadeR)
library(sp)
library(RColorBrewer)
library(latticeExtra)
library(geoprocessoR)
library(climate4R.climdex)
library(visualizeR)
data("AR6regions_land") # Use "AR5regions" instead of "AR6_WGI_reference_land_regions" until the next version is available at the hub
l1 <- get(load(paste0(find.package("visualizeR"), "/coastline.rda"))) # world coastline
lon <- bbox(AR6regions_land[region])[1,]
lat <- bbox(AR6regions_land[region])[2,]
g <- loadCircularGridData(dataset = x,
var = var,
lonLim = lon,
latLim = lat,
season = seas,
years = b)
seas
b
lon
lat
var
datasets
x <- datasets[1]
g <- loadCircularGridData(dataset = x,
var = var,
lonLim = lon,
latLim = lat,
season = seas,
years = b)
str(g)
redim(climdexGrid(tx = g, index.code = indcode), member = FALSE)
grid.index.aux <- lapply(period.blocks, function(b){
g <- loadCircularGridData(dataset = x,
var = var,
lonLim = lon,
latLim = lat,
season = seas,
years = b)
redim(climdexGrid(tx = g, index.code = indcode), member = FALSE)
})
g
str(g)
climdexGrid(tx = g, index.code = indcode)
climdexGrid(tx = g, index.code = indcode)->z
grid.index.fut <- lapply(datasets, function(x){
grid.index.aux <- lapply(period.blocks, function(b){
g <- loadCircularGridData(dataset = x,
var = var,
lonLim = lon,
latLim = lat,
season = seas,
years = b)
print(b)
redim(climdexGrid(tx = g, index.code = indcode), member = FALSE)
})
bindGrid(grid.index.aux, dimension = "time")
})
period.blocks
period.blocks[[6]]
period.blocks[[5]]
period.blocks[[5]]->b
g <- loadCircularGridData(dataset = x,
var = var,
lonLim = lon,
latLim = lat,
season = seas,
years = b)
str(g)
climdexGrid(tx = g, index.code = indcode)->z
eobs.d<-"http://www.meteo.unican.es//tds5/dodsC/eobs/e-obs_v17_0.44rotated.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  c(-25, 43), years = 1989:2008)
rm(list=ls())
library(climate4R.value)
library(loadeR)
library(visualizeR)
library(latticeExtra)
library(gridExtra)
library(RColorBrewer)
loginUDG("miturbide", "lukinvela9&9")
datasets <- UDG.datasets(pattern = "EUR44.*historical")$name
lon <- c(10, 20)
lat <- c(-10, 36)
period <- 1989:2008
eobs.d<-"http://www.meteo.unican.es//tds5/dodsC/eobs/e-obs_v17_0.44rotated.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  c(-25, 43), years = period)
lon
lon <- c(-25, 43)
lat <- NULL
period <- 1989:2008
eobs.d<-"http://www.meteo.unican.es//tds5/dodsC/eobs/e-obs_v17_0.44rotated.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
di <- dataInventory(eobs.d)
lon <- c(-25, 43)
lat <- NULL
period <- 1989:2008
eobs.d<-"http://www.meteo.unican.es/tds5/dodsC/eobs/e-obs_v17_0.44rotated.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
eobs <-   loadGridData(eobs.d, var = "rr", years = period)
eobs.d<-"http://www.meteo.unican.es/tds5/dodsC/eobs/e-obs_v17_0.50regular.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
eobs.d<-"http://www.meteo.unican.es/tds5/dodsC/eobs/e-obs_v17_0.44rotated.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", years = period)
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
eobs.d<-"http://www.meteo.unican.es/tds5/dodsC/eobs/e-obs_v17_0.11rotated.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
eobs.d<-"http://www.meteo.unican.es/tds5/dodsC/eobs/e-obs_v17_0.22rotated.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
eobs <-   loadGridData(eobs.d, var = "rr")
eobs.d<-"http://www.meteo.unican.es/tds5/dodsC/eobs/e-obs_v17_0.44rotated.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
library(visualizeR)
library(latticeExtra)
library(gridExtra)
library(RColorBrewer)
library(climate4R.value)
library(loadeR)
library(visualizeR)
library(latticeExtra)
library(gridExtra)
library(RColorBrewer)
loginUDG("miturbide", "lukinvela9&9")
datasets <- UDG.datasets(pattern = "EUR44.*historical")$name
lon <- c(-25, 43)
lat <- NULL
period <- 1989:2008
eobs.d<-"http://www.meteo.unican.es/tds5/dodsC/eobs/e-obs_v17_0.44rotated.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
bias <- list()
nas <- list()
for(i in 1:length(datasets)) {
rcm <-loadGridData(datasets[i], var = "pr",  years = period, lonLim = lon, latLim = lat)
eo <- intersectGrid(ewembi, rcm, type = "temporal", which.return = 1)
rc <- intersectGrid(ewembi, rcm, type = "temporal", which.return = 2)
rm(rcm)
m <- valueMeasure(y = eo, x = rc, measure.code = "biasRel", index.code = "mean")
bias[[i]] <- m$Measure
nas[[i]] <- m$NAmeanPercentage
}
bias <- list()
nas <- list()
for(i in 1:length(datasets)) {
rcm.aux <-loadGridData(datasets[i], var = "pr",  years = period, lonLim = lon, latLim = lat)
rcm <- interpGrid(rcm.aux, getGrid(eobs))
rm(rcm.aux)
eo <- intersectGrid(ewembi, rcm, type = "temporal", which.return = 1)
rc <- intersectGrid(ewembi, rcm, type = "temporal", which.return = 2)
rm(rcm)
m <- valueMeasure(y = eo, x = rc, measure.code = "biasRel", index.code = "mean")
bias[[i]] <- m$Measure
nas[[i]] <- m$NAmeanPercentage
}
eobs <- interpGrid(eobs, getGrid(eobs))
bias <- list()
nas <- list()
for(i in 1:length(datasets)) {
rcm.aux <-loadGridData(datasets[i], var = "pr",  years = period, lonLim = lon, latLim = lat)
rcm <- interpGrid(rcm.aux, getGrid(eobs))
rm(rcm.aux)
eo <- intersectGrid(ewembi, rcm, type = "temporal", which.return = 1)
rc <- intersectGrid(ewembi, rcm, type = "temporal", which.return = 2)
rm(rcm)
m <- valueMeasure(y = eo, x = rc, measure.code = "biasRel", index.code = "mean")
bias[[i]] <- m$Measure
nas[[i]] <- m$NAmeanPercentage
}
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
eobs.i <- interpGrid(eobs, getGrid(eobs))
bias <- list()
nas <- list()
for(i in 1:length(datasets)) {
rcm.aux <-loadGridData(datasets[i], var = "pr",  years = period, lonLim = lon, latLim = lat)
rcm <- interpGrid(rcm.aux, getGrid(eobs))
rm(rcm.aux)
eo <- intersectGrid(eobs.i, rcm, type = "temporal", which.return = 1)
rc <- intersectGrid(eobs.i, rcm, type = "temporal", which.return = 2)
rm(rcm)
m <- valueMeasure(y = eo, x = rc, measure.code = "biasRel", index.code = "mean")
bias[[i]] <- m$Measure
nas[[i]] <- m$NAmeanPercentage
}
datasets <- UDG.datasets(pattern = "EUR44.*evaluation")$name
datasets
datasets <- UDG.datasets(pattern = "EUR44.*evaluation")$name[c(1, 4, 7, 10, 12)]
datasets
lon <- c(-25, 43)
lat <- NULL
period <- 1989:2008
eobs.d<-"http://www.meteo.unican.es/tds5/dodsC/eobs/e-obs_v17_0.44rotated.ncml"
# eobs.d<-"http://www.meteo.unican.es/tds5/dodsC/eobs/e-obs_v17_0.50regular.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
#ewembi <- loadGridData(UDG.datasets(pattern = "EWEMBI")$name, var = "pr", lonLim =  lon, latLim = lat, years = period)
eobs.i <- interpGrid(eobs, getGrid(eobs))
bias <- list()
nas <- list()
for(i in 1:length(datasets)) {
rcm.aux <-loadGridData(datasets[i], var = "pr",  years = period, lonLim = lon, latLim = lat)
rcm <- interpGrid(rcm.aux, getGrid(eobs))
rm(rcm.aux)
eo <- intersectGrid(eobs.i, rcm, type = "temporal", which.return = 1)
rc <- intersectGrid(eobs.i, rcm, type = "temporal", which.return = 2)
rm(rcm)
m <- valueMeasure(y = eo, x = rc, measure.code = "biasRel", index.code = "mean")
bias[[i]] <- m$Measure
nas[[i]] <- m$NAmeanPercentage
}
options(java.parameters = "-Xmx8000m")
library(climate4R.value)
library(loadeR)
library(visualizeR)
library(latticeExtra)
library(gridExtra)
library(RColorBrewer)
loginUDG("miturbide", "lukinvela9&9")
datasets <- UDG.datasets(pattern = "EUR44.*evaluation")$name[c(1, 4, 7, 10, 12)]
lon <- c(-25, 43)
lat <- NULL
period <- 1989:2008
eobs.d<-"http://www.meteo.unican.es/tds5/dodsC/eobs/e-obs_v17_0.44rotated.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
eobs.i <- interpGrid(eobs, getGrid(eobs))
bias <- list()
nas <- list()
for(i in 1:length(datasets)) {
rcm.aux <-loadGridData(datasets[i], var = "pr",  years = period, lonLim = lon, latLim = lat)
rcm <- interpGrid(rcm.aux, getGrid(eobs))
rm(rcm.aux)
eo <- intersectGrid(eobs.i, rcm, type = "temporal", which.return = 1)
rc <- intersectGrid(eobs.i, rcm, type = "temporal", which.return = 2)
rm(rcm)
m <- valueMeasure(y = eo, x = rc, measure.code = "biasRel", index.code = "mean")
bias[[i]] <- m$Measure
nas[[i]] <- m$NAmeanPercentage
}
bias.ens <- bindGrid(bias, dimension = "member")
nas.ens <- bindGrid(nas, dimension = "member")
bias[[4]]$Dates$start <- "1989-01-01 00:00:00 GMT" # ñapa para poder hacer el binding
bias.ens <- bindGrid(bias, dimension = "member")
nas[[4]]$Dates$start <- "1989-01-01 00:00:00 GMT"
nas.ens <- bindGrid(nas, dimension = "member")
a <- spatialPlot(bias.ens, col.regions = colorRampPalette(brewer.pal(9, name = "BrBG")),
set.min = -0.5, set.max = 0.5,
at = seq(-0.5, 0.5, 0.1),
layout = c(5,1),
main = "Precipitation Relative Mean Bias 1989-2008",
colorkey = list(space = "right",
scales=list(draw=T), at = seq(-0.5, 0.5, 0.1),
labels = as.character(c("<=-0.5",seq(-0.4, 0.4, 0.1), ">=0.5"))),
strip = strip.custom(factor.levels = gsub(datasets, pattern = paste0(".*evaluation_", "|.*p1_day.ncml"), replacement = ""), par.strip.text=list(cex=1)))
b <- spatialPlot(subsetGrid(nas.ens, members = 1), col.regions = colorRampPalette(rev(brewer.pal(9, name = "RdYlGn"))),
set.min = 0, set.max = 50,
at = seq(0, 50, 5),
layout = c(1,1),
main = "NA % in EWEMBI 1989-2008",
colorkey = list(space = "right",
scales=list(draw=T), at = seq(0, 50, 5),
labels = as.character(c(seq(0, 45, 5), ">=50"))))#,
grid.arrange(a, b)
spatialPlot(climatology(eobs))
b <- spatialPlot(subsetGrid(nas.ens, members = 1), col.regions = colorRampPalette(rev(brewer.pal(9, name = "RdYlGn"))),
set.min = 0, set.max = 50,
at = seq(0, 50, 5),
layout = c(1,1),
backdrop.theme = "coastline",
main = "NA % in EWEMBI 1989-2008",
colorkey = list(space = "right",
scales=list(draw=T), at = seq(0, 50, 5),
labels = as.character(c(seq(0, 45, 5), ">=50"))))#,
grid.arrange(a, b)
spatialPlot(climatology(eobs.i))
str(eobs)
str(eobs.i)
bias <- list()
nas <- list()
for(i in 1:length(datasets)) {
rcm <-loadGridData(datasets[i], var = "pr",  years = period, lonLim = lon, latLim = lat)
#rcm <- interpGrid(rcm.aux, getGrid(eobs))
rm(rcm.aux)
eo <- intersectGrid(eobs, rcm, type = "temporal", which.return = 1)
rc <- intersectGrid(eobs, rcm, type = "temporal", which.return = 2)
rm(rcm)
m <- valueMeasure(y = eo, x = rc, measure.code = "biasRel", index.code = "mean")
bias[[i]] <- m$Measure
nas[[i]] <- m$NAmeanPercentage
}
rm(list=ls())
options(java.parameters = "-Xmx8000m")
library(climate4R.value)
library(loadeR)
library(visualizeR)
library(latticeExtra)
library(gridExtra)
library(RColorBrewer)
loginUDG("miturbide", "lukinvela9&9")
datasets <- UDG.datasets(pattern = "EUR44.*evaluation")$name[c(1, 4, 7, 10, 12)]
lon <- c(-25, 43)
lat <- NULL
period <- 1989:2008
eobs.d<-"http://www.meteo.unican.es/tds5/dodsC/eobs/e-obs_v17_0.44rotated.ncml"
eobs <-   loadGridData(eobs.d, var = "rr", lonLim =  lon, latLim = lat, years = period)
bias <- list()
nas <- list()
for(i in 1:length(datasets)) {
rcm <-loadGridData(datasets[i], var = "pr",  years = period, lonLim = lon, latLim = lat)
#rcm <- interpGrid(rcm.aux, getGrid(eobs))
rm(rcm.aux)
eo <- intersectGrid(eobs, rcm, type = "temporal", which.return = 1)
rc <- intersectGrid(eobs, rcm, type = "temporal", which.return = 2)
rm(rcm)
m <- valueMeasure(y = eo, x = rc, measure.code = "biasRel", index.code = "mean")
bias[[i]] <- m$Measure
nas[[i]] <- m$NAmeanPercentage
}
